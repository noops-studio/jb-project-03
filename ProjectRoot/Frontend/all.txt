
# tsconfig.node.json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

# index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

# tailwind.config.js
module.exports = {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}"
    ],
    theme: {
      extend: {}
    },
    plugins: []
  };
  
# tsconfig.app.json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

# .gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# package.json
{
  "name": "package.json",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.3",
    "axios": "^1.8.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.5.0",
    "recharts": "^2.15.2",
    "tailwindcss": "^4.1.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.1.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}

# tsconfig.json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

# eslint.config.js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

# vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(),tailwindcss()],
})

# src/App.tsx
import React, { JSX, useContext } from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import { AuthContext } from "./context/AuthContext";
import NavBar from "./components/NavBar";
import Login from "./pages/Login";
import Register from "./pages/Register";
import VacationList from "./pages/VacationList";
import AddVacation from "./pages/AddVacation";
import EditVacation from "./pages/EditVacation";
import Reports from "./pages/Reports";

// Wrapper for routes that require login
const PrivateRoute: React.FC<{ children: JSX.Element }> = ({ children }) => {
  const { user } = useContext(AuthContext);
  return user ? children : <Navigate to="/login" />;
};

// Wrapper for routes that require admin role
const AdminRoute: React.FC<{ children: JSX.Element }> = ({ children }) => {
  const { user } = useContext(AuthContext);
  return (user && user.role === "admin") ? children : <Navigate to="/vacations" />;
};

const App: React.FC = () => {
  return (
    <div className="min-h-screen flex flex-col">
      <NavBar />
      <div className="flex-1 p-4">
        <Routes>
          <Route path="/" element={<Navigate to="/vacations" />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/vacations" element={<PrivateRoute><VacationList /></PrivateRoute>} />
          <Route path="/addVacation" element={<AdminRoute><AddVacation /></AdminRoute>} />
          <Route path="/editVacation/:id" element={<AdminRoute><EditVacation /></AdminRoute>} />
          <Route path="/reports" element={<AdminRoute><Reports /></AdminRoute>} />
          <Route path="*" element={<Navigate to="/vacations" />} />
        </Routes>
      </div>
    </div>
  );
};

export default App;

# src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import App from "./App";
import "./index.css";  // Tailwind CSS import

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <AuthProvider>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </AuthProvider>
  </React.StrictMode>
);

# src/context/AuthContext.tsx
import React, { createContext, useState, useEffect } from "react";

// Define the shape of our user object
interface User {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  role: "user" | "admin";
}

// Define context value types
interface AuthContextType {
  user: User | null;
  login: (user: User, token: string) => void;
  logout: () => void;
}

// Create context with default values
export const AuthContext = createContext<AuthContextType>({
  user: null,
  login: () => {},
  logout: () => {}
});

// AuthProvider component to wrap around the app
export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);

  // On mount, load user from localStorage if available (to persist login state)
  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  // Define login function
  const login = (userData: User, token: string) => {
    // Save token and user data in local storage
    localStorage.setItem("token", token);
    localStorage.setItem("user", JSON.stringify(userData));
    setUser(userData);
  };

  // Define logout function
  const logout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    setUser(null);
  };

  const value = { user, login, logout };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

# src/App.css

# src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* You can add global styles or overrides below if needed. */

# src/api.ts
import axios from "axios";

// You can set the API URL via an environment variable for flexibility
const BASE_URL = import.meta.env.VITE_API_URL || "http://localhost:3000/api";

// Create an Axios instance
const API = axios.create({
  baseURL: BASE_URL
});

// Attach token to each request if available
API.interceptors.request.use(config => {
  const token = localStorage.getItem("token");
  if (token && config.headers) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default API;

# src/components/NavBar.tsx
import React, { useContext } from "react";
import { Link, useNavigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";

const NavBar: React.FC = () => {
  const { user, logout } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <nav className="bg-blue-600 text-white p-4 flex justify-between items-center">
      <div className="text-xl font-semibold">
        Vacation System
      </div>
      <div>
        {!user ? (
          // Links for visitors (not logged in)
          <>
            <Link to="/login" className="mr-4 hover:underline">Login</Link>
            <Link to="/register" className="hover:underline">Register</Link>
          </>
        ) : (
          // Links for logged-in users
          <>
            <Link to="/vacations" className="mr-4 hover:underline">Vacations</Link>
            {user.role === "admin" && (
              <>
                <Link to="/addVacation" className="mr-4 hover:underline">Add Vacation</Link>
                <Link to="/reports" className="mr-4 hover:underline">Reports</Link>
              </>
            )}
            <span className="mr-4">Hello, <strong>{user.firstName} {user.lastName}</strong></span>
            <button onClick={handleLogout} className="bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded">
              Logout
            </button>
          </>
        )}
      </div>
    </nav>
  );
};

export default NavBar;

# src/vite-env.d.ts
/// <reference types="vite/client" />

# src/assets/react.svg
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
# src/pages/VacationList.tsx
import React, { useState, useEffect, useContext } from "react";
import API from "../api";
import { AuthContext } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";

interface Vacation {
  id: number;
  destination: string;
  description: string;
  startDate: string;
  endDate: string;
  price: number;
  imageFileName: string;
  followersCount: number;
  isFollowed?: boolean;
}

const VacationList: React.FC = () => {
  const { user } = useContext(AuthContext);
  const [vacations, setVacations] = useState<Vacation[]>([]);
  const [followedOnly, setFollowedOnly] = useState(false);
  const [upcomingOnly, setUpcomingOnly] = useState(false);
  const [activeOnly, setActiveOnly] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const navigate = useNavigate();

  useEffect(() => {
    // Fetch vacations on component mount
    API.get("/vacations")
      .then(res => {
        setVacations(res.data);
      })
      .catch(err => {
        console.error("Failed to fetch vacations:", err);
        // If unauthorized (token expired), force logout
        if (err.response && err.response.status === 401) {
          navigate("/login");
        }
      });
  }, [navigate]);

  // Reset to first page whenever filter criteria change or data changes
  useEffect(() => {
    setCurrentPage(1);
  }, [followedOnly, upcomingOnly, activeOnly, vacations]);

  // Compute filtered vacations based on toggles
  const filteredVacations = vacations.filter(vac => {
    const now = new Date();
    const starts = new Date(vac.startDate);
    const ends = new Date(vac.endDate);
    if (followedOnly && !vac.isFollowed) return false;
    if (upcomingOnly && !(starts > now)) return false;
    if (activeOnly && !(starts <= now && ends >= now)) return false;
    return true;
  });

  // Pagination logic
  const itemsPerPage = 10;
  const totalPages = Math.ceil(filteredVacations.length / itemsPerPage);
  const displayedVacations = filteredVacations.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  const goToPrevPage = () => {
    setCurrentPage(prev => Math.max(prev - 1, 1));
  };
  const goToNextPage = () => {
    setCurrentPage(prev => Math.min(prev + 1, totalPages));
  };

  // Follow a vacation
  const handleFollow = async (vacationId: number) => {
    try {
      await API.post(`/vacations/${vacationId}/follow`);
      // Update state: mark as followed and increment count
      setVacations(vacations.map(v => {
        if (v.id === vacationId) {
          return { ...v, isFollowed: true, followersCount: v.followersCount + 1 };
        }
        return v;
      }));
    } catch (err) {
      console.error("Follow failed:", err);
    }
  };

  // Unfollow a vacation
  const handleUnfollow = async (vacationId: number) => {
    try {
      await API.delete(`/vacations/${vacationId}/follow`);
      // Update state: mark as not followed and decrement count
      setVacations(vacations.map(v => {
        if (v.id === vacationId) {
          return { ...v, isFollowed: false, followersCount: v.followersCount - 1 };
        }
        return v;
      }));
    } catch (err) {
      console.error("Unfollow failed:", err);
    }
  };

  // Delete a vacation (admin)
  const handleDelete = async (vacationId: number) => {
    const confirm = window.confirm("Are you sure you want to delete this vacation?");
    if (!confirm) return;
    try {
      await API.delete(`/vacations/${vacationId}`);
      // Remove from state list
      setVacations(vacations.filter(v => v.id !== vacationId));
    } catch (err) {
      console.error("Delete failed:", err);
    }
  };

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Vacations</h2>

      {/* Filter controls */}
      <div className="mb-4 flex flex-wrap items-center gap-4">
        {user?.role !== "admin" && (
          <label>
            <input 
              type="checkbox" 
              checked={followedOnly} 
              onChange={e => setFollowedOnly(e.target.checked)} 
              className="mr-1"
            />
            Followed Only
          </label>
        )}
        <label>
          <input 
            type="checkbox" 
            checked={upcomingOnly} 
            onChange={e => setUpcomingOnly(e.target.checked)} 
            className="mr-1"
          />
          Upcoming Only
        </label>
        <label>
          <input 
            type="checkbox" 
            checked={activeOnly} 
            onChange={e => setActiveOnly(e.target.checked)} 
            className="mr-1"
          />
          Active Now
        </label>
      </div>

      {/* Vacation cards list */}
      <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {displayedVacations.map(vac => {
          const starts = new Date(vac.startDate);
          const ends = new Date(vac.endDate);
          const now = new Date();
          // Determine a label for status (for display or style)
          let statusLabel = "";
          if (ends < now) statusLabel = "Past";
          else if (starts > now) statusLabel = "Upcoming";
          else statusLabel = "Active";

          return (
            <div key={vac.id} className="border rounded shadow p-4 flex flex-col">
              <h3 className="text-xl font-semibold mb-2">{vac.destination}</h3>
              <p className="mb-2">{vac.description}</p>
              <p className="mb-1"><strong>Start:</strong> {vac.startDate} &nbsp; <strong>End:</strong> {vac.endDate}</p>
              <p className="mb-1"><strong>Price:</strong> ${Number(vac.price).toFixed(2)}</p>
              <p className="mb-2"><strong>Followers:</strong> {vac.followersCount}</p>
              <p className={`mb-2 font-semibold ${statusLabel === "Active" ? "text-green-600" : statusLabel === "Upcoming" ? "text-blue-600" : "text-gray-500"}`}>
                Status: {statusLabel}
              </p>
              {user?.role === "admin" ? (
                // Admin controls: Edit / Delete
                <div className="mt-auto pt-2">
                  <button 
                    onClick={() => navigate(`/editVacation/${vac.id}`)} 
                    className="mr-3 px-4 py-1 bg-yellow-500 text-white rounded hover:bg-yellow-600"
                  >
                    Edit
                  </button>
                  <button 
                    onClick={() => handleDelete(vac.id)} 
                    className="px-4 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                  >
                    Delete
                  </button>
                </div>
              ) : (
                // User controls: Follow / Unfollow
                <div className="mt-auto pt-2">
                  {vac.isFollowed ? (
                    <button 
                      onClick={() => handleUnfollow(vac.id)} 
                      className="px-4 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                    >
                      Unfollow
                    </button>
                  ) : (
                    <button 
                      onClick={() => handleFollow(vac.id)} 
                      className="px-4 py-1 bg-green-600 text-white rounded hover:bg-green-700"
                    >
                      Follow
                    </button>
                  )}
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Pagination controls */}
      {filteredVacations.length > 0 && (
        <div className="mt-6 text-center">
          <button onClick={goToPrevPage} disabled={currentPage === 1} className="px-3 py-1 border rounded mr-2 disabled:opacity-50">
            Prev
          </button>
          <span>Page {currentPage} of {totalPages}</span>
          <button onClick={goToNextPage} disabled={currentPage === totalPages} className="px-3 py-1 border rounded ml-2 disabled:opacity-50">
            Next
          </button>
        </div>
      )}
    </div>
  );
};

export default VacationList;

# src/pages/Reports.tsx
import React, { useState, useEffect } from "react";
import API from "../api";
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, CartesianGrid, ResponsiveContainer } from "recharts";

interface ReportData {
  destination: string;
  followersCount: number;
}

const Reports: React.FC = () => {
  const [data, setData] = useState<ReportData[]>([]);

  useEffect(() => {
    // Fetch report data (JSON)
    API.get("/vacations/report").then(res => {
      setData(res.data);
    }).catch(err => {
      console.error("Failed to fetch report data:", err);
    });
  }, []);

  const downloadCsv = async () => {
    try {
      const response = await API.get("/vacations/report/csv", { responseType: "blob" });
      const blob = new Blob([response.data], { type: "text/csv" });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", "vacations_report.csv");
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (err) {
      console.error("CSV download failed:", err);
    }
  };

  return (
    <div className="max-w-3xl mx-auto mt-6">
      <h2 className="text-2xl font-bold mb-4 text-center">Vacation Followers Report</h2>
      {data.length > 0 ? (
        <ResponsiveContainer width="100%" height={400}>
          <BarChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="destination" angle={-15} textAnchor="end" height={80} interval={0} />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey="followersCount" name="Followers" fill="#3498db" />
          </BarChart>
        </ResponsiveContainer>
      ) : (
        <p className="text-center text-gray-700">No data available.</p>
      )}
      <div className="text-center mt-4">
        <button onClick={downloadCsv} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
          Download CSV
        </button>
      </div>
    </div>
  );
};

export default Reports;

# src/pages/EditVacation.tsx
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import API from "../api";

const EditVacation: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [destination, setDestination] = useState("");
  const [description, setDescription] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [price, setPrice] = useState("");
  const [currentImageName, setCurrentImageName] = useState("");
  const [newImageFile, setNewImageFile] = useState<File | null>(null);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  // Fetch existing vacation data
  useEffect(() => {
    if (!id) return;
    API.get(`/vacations/${id}`)
      .then(res => {
        const vac = res.data;
        setDestination(vac.destination);
        setDescription(vac.description);
        setStartDate(vac.startDate?.slice(0, 10));  // slice to get YYYY-MM-DD
        setEndDate(vac.endDate?.slice(0, 10));
        setPrice(String(vac.price));
        setCurrentImageName(vac.imageFileName);
      })
      .catch(err => {
        console.error("Failed to load vacation:", err);
      });
  }, [id]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    if (!id) return;
    const formData = new FormData();
    formData.append("destination", destination);
    formData.append("description", description);
    formData.append("startDate", startDate);
    formData.append("endDate", endDate);
    formData.append("price", price);
    if (newImageFile) {
      formData.append("image", newImageFile);
    }
    try {
      await API.put(`/vacations/${id}`, formData, {
        headers: { "Content-Type": "multipart/form-data" }
      });
      navigate("/vacations");
    } catch (err: any) {
      console.error("Edit vacation failed:", err);
      setError(err.response?.data?.message || "Failed to update vacation.");
    }
  };

  const todayStr = new Date().toISOString().split("T")[0];

  return (
    <div className="max-w-md mx-auto mt-6 p-4 bg-white shadow-md rounded">
      <h2 className="text-2xl font-bold mb-4 text-center">Edit Vacation</h2>
      {error && <p className="text-red-600 mb-3">{error}</p>}
      <form onSubmit={handleSubmit}>
        <label className="block mb-2">
          Destination:
          <input 
            type="text" 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={destination}
            onChange={e => setDestination(e.target.value)}
            required 
          />
        </label>
        <label className="block mb-2">
          Description:
          <textarea 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={description}
            onChange={e => setDescription(e.target.value)}
            required 
          />
        </label>
        <label className="block mb-2">
          Start Date:
          <input 
            type="date" 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={startDate}
            onChange={e => setStartDate(e.target.value)}
            required 
            /* Allow past dates because editing past vacations is allowed */
            min={todayStr /* optional: you may allow past, remove min if needed */}
          />
        </label>
        <label className="block mb-2">
          End Date:
          <input 
            type="date" 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={endDate}
            onChange={e => setEndDate(e.target.value)}
            required 
            min={startDate || todayStr}
          />
        </label>
        <label className="block mb-2">
          Price (USD):
          <input 
            type="number" 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={price}
            onChange={e => setPrice(e.target.value)}
            required 
            min={0}
            max={10000}
            step="0.01"
          />
        </label>
        <label className="block mb-4">
          Image:
          {currentImageName && (
            <div className="mb-2 text-sm">
              Current image file: <span className="italic">{currentImageName}</span>
            </div>
          )}
          <input 
            type="file" 
            className="block w-full"
            accept="image/*"
            onChange={e => setNewImageFile(e.target.files ? e.target.files[0] : null)}
          />
          <small className="text-gray-600">Leave blank to keep current image</small>
        </label>
        <button type="submit" className="w-full bg-yellow-500 text-white py-2 px-4 rounded hover:bg-yellow-600">
          Update Vacation
        </button>
      </form>
    </div>
  );
};

export default EditVacation;

# src/pages/Login.tsx
import React, { useState, useContext } from "react";
import { Link, useNavigate } from "react-router-dom";
import API from "../api";
import { AuthContext } from "../context/AuthContext";

const Login: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    try {
      const res = await API.post("/auth/login", { email, password });
      const { token, user } = res.data;
      // Save user in context (login)
      login(user, token);
      navigate("/vacations");
    } catch (err: unknown) {
        console.error("Login failed:", err);
        // You may narrow the error type if you expect it to be an Axios error:
        if (axios.isAxiosError(err)) {
          setError(err.response?.data?.message || "Login failed. Please check your credentials.");
        } else {
          setError("An unexpected error occurred.");
        }
      }
      
  };

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded">
      <h2 className="text-2xl font-bold mb-4 text-center">Login</h2>
      {error && <p className="text-red-600 mb-3">{error}</p>}
      <form onSubmit={handleSubmit}>
        <label className="block mb-2">
          Email:
          <input 
            type="email" 
            className="block w-full border rounded px-3 py-2 mt-1"
            value={email} 
            onChange={e => setEmail(e.target.value)} 
            required 
          />
        </label>
        <label className="block mb-4">
          Password:
          <input 
            type="password" 
            className="block w-full border rounded px-3 py-2 mt-1"
            value={password} 
            onChange={e => setPassword(e.target.value)} 
            required 
            minLength={4}
          />
        </label>
        <button type="submit" className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">
          Sign In
        </button>
      </form>
      <p className="mt-4 text-center">
        New user? <Link to="/register" className="text-blue-600 hover:underline">Register here</Link>
      </p>
    </div>
  );
};

export default Login;

# src/pages/Register.tsx
import React, { useState, useContext } from "react";
import { Link, useNavigate } from "react-router-dom";
import API from "../api";
import { AuthContext } from "../context/AuthContext";

const Register: React.FC = () => {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    try {
      const res = await API.post("/auth/register", { firstName, lastName, email, password });
      const { token, user } = res.data;
      login(user, token);  // Log the user in on successful registration
      navigate("/vacations");
    } catch (err: any) {
      console.error("Registration failed:", err);
      setError(err.response?.data?.message || "Registration failed.");
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded">
      <h2 className="text-2xl font-bold mb-4 text-center">Register</h2>
      {error && <p className="text-red-600 mb-3">{error}</p>}
      <form onSubmit={handleSubmit}>
        <label className="block mb-2">
          First Name:
          <input 
            type="text" 
            className="block w-full border rounded px-3 py-2 mt-1"
            value={firstName} 
            onChange={e => setFirstName(e.target.value)}
            required 
          />
        </label>
        <label className="block mb-2">
          Last Name:
          <input 
            type="text" 
            className="block w-full border rounded px-3 py-2 mt-1"
            value={lastName} 
            onChange={e => setLastName(e.target.value)}
            required 
          />
        </label>
        <label className="block mb-2">
          Email:
          <input 
            type="email" 
            className="block w-full border rounded px-3 py-2 mt-1"
            value={email} 
            onChange={e => setEmail(e.target.value)}
            required 
          />
        </label>
        <label className="block mb-4">
          Password:
          <input 
            type="password" 
            className="block w-full border rounded px-3 py-2 mt-1"
            value={password} 
            onChange={e => setPassword(e.target.value)}
            required 
            minLength={4}
          />
        </label>
        <button type="submit" className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">
          Sign Up
        </button>
      </form>
      <p className="mt-4 text-center">
        Already have an account? <Link to="/login" className="text-blue-600 hover:underline">Login</Link>
      </p>
    </div>
  );
};

export default Register;

# src/pages/AddVacation.tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import API from "../api";

const AddVacation: React.FC = () => {
  const [destination, setDestination] = useState("");
  const [description, setDescription] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [price, setPrice] = useState("");
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    const formData = new FormData();
    formData.append("destination", destination);
    formData.append("description", description);
    formData.append("startDate", startDate);
    formData.append("endDate", endDate);
    formData.append("price", price);
    if (imageFile) {
      formData.append("image", imageFile);
    }
    try {
      await API.post("/vacations", formData, {
        headers: { "Content-Type": "multipart/form-data" }
      });
      navigate("/vacations");
    } catch (err: string) {
      console.error("Add vacation failed:", err);
      setError(err.response?.data?.message || "Failed to add vacation.");
    }
  };

  // For client-side date validation: ensure endDate min is startDate, and startDate min is today
  const todayStr = new Date().toISOString().split("T")[0];

  return (
    <div className="max-w-md mx-auto mt-6 p-4 bg-white shadow-md rounded">
      <h2 className="text-2xl font-bold mb-4 text-center">Add Vacation</h2>
      {error && <p className="text-red-600 mb-3">{error}</p>}
      <form onSubmit={handleSubmit}>
        <label className="block mb-2">
          Destination:
          <input 
            type="text" 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={destination}
            onChange={e => setDestination(e.target.value)}
            required 
          />
        </label>
        <label className="block mb-2">
          Description:
          <textarea 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={description}
            onChange={e => setDescription(e.target.value)}
            required 
          />
        </label>
        <label className="block mb-2">
          Start Date:
          <input 
            type="date" 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={startDate}
            onChange={e => setStartDate(e.target.value)}
            required 
            min={todayStr}
          />
        </label>
        <label className="block mb-2">
          End Date:
          <input 
            type="date" 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={endDate}
            onChange={e => setEndDate(e.target.value)}
            required 
            min={startDate || todayStr}
          />
        </label>
        <label className="block mb-2">
          Price (USD):
          <input 
            type="number" 
            className="block w-full border rounded px-3 py-1 mt-1"
            value={price}
            onChange={e => setPrice(e.target.value)}
            required 
            min={0}
            max={10000}
            step="0.01"
          />
        </label>
        <label className="block mb-4">
          Image:
          <input 
            type="file" 
            className="block w-full mt-1"
            accept="image/*"
            onChange={e => setImageFile(e.target.files ? e.target.files[0] : null)}
            required 
          />
        </label>
        <button type="submit" className="w-full bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700">
          Add Vacation
        </button>
      </form>
    </div>
  );
};

export default AddVacation;

