
# middleware/admin.middleware.ts
import { Response, NextFunction } from 'express';
import { AuthRequest } from './auth.middleware';
import { UserRole } from '../models/user.model';
import { AppError } from '../utils/error.utils';

export const requireAdmin = (req: AuthRequest, res: Response, next: NextFunction) => {
  if (!req.user || req.user.role !== UserRole.ADMIN) {
    return next(new AppError('Access denied. Admin role required.', 403));
  }
  next();
};

# middleware/validation.middleware.ts
import { Request, Response, NextFunction } from 'express';
import { Schema } from 'joi';
import { AppError } from '../utils/error.utils';

export const validate = (schema: Schema) => {
  return (req: Request, res: Response, next: NextFunction) => {
    const { error } = schema.validate(req.body, { abortEarly: false });
    
    if (error) {
      const details: Record<string, string> = {};
      
      error.details.forEach(detail => {
        const path = detail.path.join('.');
        details[path] = detail.message;
      });

      return next(new AppError('Validation failed', 400, 'VALIDATION_ERROR', details));
    }
    
    next();
  };
};

# middleware/error.middleware.ts
import { Request, Response, NextFunction } from 'express';
import { AppError } from '../utils/error.utils';

export const errorHandler = (err: Error, req: Request, res: Response, next: NextFunction) => {
  console.error(err);

  if (err instanceof AppError) {
    return res.status(err.statusCode).json({
      error: {
        message: err.message,
        code: err.code,
        details: err.details
      }
    });
  }

  // Sequelize unique constraint error
  if (err.name === 'SequelizeUniqueConstraintError') {
    return res.status(409).json({
      error: {
        message: 'Resource already exists',
        code: 'RESOURCE_EXISTS',
        details: {
          field: (err as any).errors[0].path,
          message: (err as any).errors[0].message
        }
      }
    });
  }

  // Default error response
  return res.status(500).json({
    error: {
      message: 'Internal Server Error',
      code: 'SERVER_ERROR'
    }
  });
};
# middleware/auth.middleware.ts
// src/middleware/auth.middleware.ts
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import config from 'config';
import { User } from '../models/user.model';
import { AppError } from '../utils/error.utils';

interface JwtConfig {
  secret: string;
}

interface JwtPayload {
  id: string; // Changed from number to string for UUID
  role: string;
}

export interface AuthRequest extends Request {
  user?: User;
}

export const authenticate = async (req: AuthRequest, res: Response, next: NextFunction) => {
  try {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      throw new AppError('Authentication token required', 401);
    }

    const token = authHeader.split(' ')[1];
    
    if (!token) {
      throw new AppError('Authentication token required', 401);
    }

    try {
      const jwtConfig = config.get<JwtConfig>('jwt');
      const decoded = jwt.verify(token, jwtConfig.secret) as JwtPayload;
      
      const user = await User.findByPk(decoded.id);
      
      if (!user) {
        throw new AppError('User not found', 401);
      }

      req.user = user;
      next();
    } catch (error) {
      throw new AppError('Invalid or expired token', 401);
    }
  } catch (error) {
    next(error);
  }
};
# seed/data.json
{
  "users": [
    {
      "firstName": "Admin",
      "lastName": "User",
      "email": "admin@example.com",
      "password": "admin1234",
      "role": "ADMIN"
    },
    {
      "firstName": "Regular",
      "lastName": "User",
      "email": "user@example.com",
      "password": "user1234",
      "role": "USER"
    }
  ],
  "vacations": [
    {
      "destination": "Paris, France",
      "description": "Experience the romantic atmosphere of the City of Lights, visit iconic landmarks like the Eiffel Tower, Louvre Museum, and Notre-Dame Cathedral.",
      "startDate": "2025-06-15",
      "endDate": "2025-06-22",
      "price": 1200.5,
      "imageFileName": "paris.jpg"
    },
    {
      "destination": "Rome, Italy",
      "description": "Explore ancient history at the Colosseum, Roman Forum, and Vatican City. Enjoy delicious Italian cuisine and architecture.",
      "startDate": "2025-07-05",
      "endDate": "2025-07-12",
      "price": 1350.0,
      "imageFileName": "rome.jpg"
    },
    {
      "destination": "Barcelona, Spain",
      "description": "Discover the unique architecture of Antoni Gaudí at Sagrada Familia and Park Güell. Enjoy Mediterranean beaches and vibrant street life.",
      "startDate": "2025-07-20",
      "endDate": "2025-07-27",
      "price": 1150.75,
      "imageFileName": "barcelona.jpg"
    },
    {
      "destination": "Tokyo, Japan",
      "description": "Experience the perfect blend of ancient traditions and cutting-edge technology. Visit historic temples, gardens, and futuristic districts.",
      "startDate": "2025-08-10",
      "endDate": "2025-08-20",
      "price": 2500.0,
      "imageFileName": "tokyo.jpg"
    },
    {
      "destination": "Santorini, Greece",
      "description": "Relax on this stunning volcanic island with white-washed buildings and blue domes overlooking the Aegean Sea.",
      "startDate": "2025-09-01",
      "endDate": "2025-09-08",
      "price": 1800.25,
      "imageFileName": "santorini.jpg"
    },
    {
      "destination": "New York City, USA",
      "description": "Explore the Big Apple with its iconic skyline, Central Park, Broadway shows, world-class museums, and diverse neighborhoods.",
      "startDate": "2025-10-05",
      "endDate": "2025-10-12",
      "price": 1950.0,
      "imageFileName": "nyc.jpg"
    },
    {
      "destination": "Sydney, Australia",
      "description": "Visit the famous Opera House, Harbour Bridge, and beautiful beaches. Experience the laid-back Australian lifestyle.",
      "startDate": "2025-11-15",
      "endDate": "2025-11-25",
      "price": 2750.5,
      "imageFileName": "sydney.jpg"
    },
    {
      "destination": "Bali, Indonesia",
      "description": "Discover tropical paradise with lush rice terraces, ancient temples, yoga retreats, and pristine beaches.",
      "startDate": "2026-01-10",
      "endDate": "2026-01-20",
      "price": 1600.75,
      "imageFileName": "bali.jpg"
    },
    {
      "destination": "Cape Town, South Africa",
      "description": "Experience stunning landscapes from Table Mountain to Cape Point, wildlife, and vibrant culture in this diverse city.",
      "startDate": "2026-02-15",
      "endDate": "2026-02-25",
      "price": 2100.0,
      "imageFileName": "capetown.jpg"
    },
    {
      "destination": "Rio de Janeiro, Brazil",
      "description": "Enjoy the rhythm of samba, spectacular beaches like Copacabana, and iconic sights like Christ the Redeemer.",
      "startDate": "2026-03-01",
      "endDate": "2026-03-10",
      "price": 1850.25,
      "imageFileName": "rio.jpg"
    },
    {
      "destination": "Vienna, Austria",
      "description": "Immerse yourself in classical music, imperial palaces, coffee house culture, and artistic heritage.",
      "startDate": "2026-04-15",
      "endDate": "2026-04-22",
      "price": 1400.5,
      "imageFileName": "vienna.jpg"
    },
    {
      "destination": "Cairo, Egypt",
      "description": "Step back in time with visits to the ancient pyramids, Sphinx, and the treasure-filled Egyptian Museum.",
      "startDate": "2026-05-10",
      "endDate": "2026-05-20",
      "price": 1700.0,
      "imageFileName": "cairo.jpg"
    }
  ],
  "followers": [
    {
      "userEmail": "user@example.com",
      "vacationDestination": "Paris, France"
    },
    {
      "userEmail": "user@example.com",
      "vacationDestination": "Tokyo, Japan"
    },
    {
      "userEmail": "user@example.com",
      "vacationDestination": "Bali, Indonesia"
    }
  ]
}

# seed/index.ts
import bcrypt from 'bcrypt';
import { User, Vacation, Follower, sequelize } from '../models';
import { UserRole } from '../models/user.model';
import { v4 as uuidv4 } from 'uuid';

// Define the seed data types
interface SeedUser {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  role: string;
}

interface SeedVacation {
  destination: string;
  description: string;
  startDate: string;
  endDate: string;
  price: number;
  imageFileName: string;
}

interface SeedFollower {
  userEmail: string;
  vacationDestination: string;
}

interface SeedData {
  users: SeedUser[];
  vacations: SeedVacation[];
  followers: SeedFollower[];
}

// Import the seed data with the correct type
const seedData: SeedData = require('./data.json');

const loadSeedData = async () => {
  try {
    console.log('Starting database seeding...');
    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
    
    // Sync database with force: true to drop tables
    await sequelize.sync({ force: true });
    console.log('Database tables created');

    // Seed users
    console.log('Seeding users...');
    const userMap = new Map<string, User>();
    
    for (const userData of seedData.users) {
      const hashedPassword = await bcrypt.hash(userData.password, 10);
      const user = await User.create({
        ...userData,
        password: hashedPassword,
        role: userData.role as UserRole
      });
      userMap.set(userData.email, user);
    }
    console.log(`${userMap.size} users created`);

    // Seed vacations
    console.log('Seeding vacations...');
    const vacationMap = new Map<string, Vacation>();
    
    for (const vacationData of seedData.vacations) {
      // Generate UUID for the image filename (simulating S3 upload)
      const fileExt = vacationData.imageFileName.split('.').pop();
      const imageFileName = `${uuidv4()}.${fileExt}`;
      
      const vacation = await Vacation.create({
        ...vacationData,
        imageFileName,
        startDate: new Date(vacationData.startDate),
        endDate: new Date(vacationData.endDate)
      });
      vacationMap.set(vacationData.destination, vacation);
    }
    console.log(`${vacationMap.size} vacations created`);

    // Seed followers
    console.log('Seeding followers...');
    let followerCount = 0;
    
    for (const followerData of seedData.followers) {
      const user = userMap.get(followerData.userEmail);
      const vacation = vacationMap.get(followerData.vacationDestination);
      
      if (user && vacation) {
        await Follower.create({
          userId: user.id,
          vacationId: vacation.id
        });
        followerCount++;
      }
    }
    console.log(`${followerCount} followers created`);

    console.log('Seeding completed successfully');
    process.exit(0);
  } catch (error) {
    console.error('Error seeding database:', error);
    process.exit(1);
  }
};

// Run the seeder
loadSeedData();
# app.ts
import express from 'express';
import cors from 'cors';
import config from 'config';
import routes from './routes';
import { errorHandler } from './middleware/error.middleware';

// Initialize express app
const app = express();

// Apply middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Apply routes
app.use('/api', routes);

// Apply error handler
app.use(errorHandler);

export default app;

# utils/error.utils.ts
export class AppError extends Error {
  statusCode: number;
  code: string;
  details?: Record<string, any>;

  constructor(
    message: string,
    statusCode: number = 500,
    code: string = "ERROR",
    details?: Record<string, any>
  ) {
    super(message);
    this.statusCode = statusCode;
    this.code = code;
    this.details = details;

    // Set prototype explicitly to work with instanceof
    Object.setPrototypeOf(this, AppError.prototype);
  }
}

# utils/validation.utils.ts
import { validate as uuidValidate } from 'uuid';

/**
 * Validates if a string is a valid UUID
 * @param id The string to validate
 * @returns boolean indicating if the string is a valid UUID
 */
export const isUUID = (id: string): boolean => {
  return uuidValidate(id);
};
# utils/jwt.utils.ts
import jwt from 'jsonwebtoken';
import config from 'config';
import { User } from '../models/user.model';

interface JwtConfig {
  secret: string;
  expiresIn: string;
}

export const generateToken = (user: User): string => {
  const payload = {
    id: user.id, // Now a UUID string
    role: user.role
  };

  const jwtConfig = config.get<JwtConfig>('jwt');
  
  return jwt.sign(payload, jwtConfig.secret, {
    expiresIn: jwtConfig.expiresIn
  });
};
# models/user.model.ts
import { Table, Column, Model, DataType, HasMany, BeforeCreate, BeforeUpdate } from 'sequelize-typescript';
import bcrypt from 'bcrypt';
import { Follower } from './follower.model';

export enum UserRole {
  USER = 'USER',
  ADMIN = 'ADMIN'
}

@Table({
  tableName: 'users',
  timestamps: true
})
export class User extends Model {
  @Column({
    type: DataType.UUID,
    defaultValue: DataType.UUIDV4,
    primaryKey: true
  })
  id!: string;

  @Column({
    type: DataType.STRING,
    allowNull: false
  })
  firstName!: string;

  @Column({
    type: DataType.STRING,
    allowNull: false
  })
  lastName!: string;

  @Column({
    type: DataType.STRING,
    allowNull: false,
    unique: true,
    validate: {
      isEmail: true
    }
  })
  email!: string;

  @Column({
    type: DataType.STRING,
    allowNull: false
  })
  password!: string;

  @Column({
    type: DataType.ENUM(...Object.values(UserRole)),
    allowNull: false,
    defaultValue: UserRole.USER
  })
  role!: UserRole;

  @HasMany(() => Follower)
  followers!: Follower[];

  // Getters
  get fullName(): string {
    return `${this.firstName} ${this.lastName}`;
  }

  // Methods
  async comparePassword(plainPassword: string): Promise<boolean> {
    return bcrypt.compare(plainPassword, this.password);
  }

  // Hooks
  @BeforeCreate
  @BeforeUpdate
  static async hashPassword(instance: User) {
    if (instance.changed('password')) {
      instance.password = await bcrypt.hash(instance.password, 10);
    }
  }

  // Don't return password in toJSON
  toJSON() {
    const values = { ...this.get() };
    delete values.password;
    return values;
  }
}
# models/vacation.model.ts
import { Table, Column, Model, DataType, HasMany, BeforeDestroy } from 'sequelize-typescript';
import { Follower } from './follower.model';
import { S3Service } from '../services/s3.service';

@Table({
  tableName: 'vacations',
  timestamps: true
})
export class Vacation extends Model {
  @Column({
    type: DataType.UUID,
    defaultValue: DataType.UUIDV4,
    primaryKey: true
  })
  id!: string;

  @Column({
    type: DataType.STRING,
    allowNull: false
  })
  destination!: string;

  @Column({
    type: DataType.TEXT,
    allowNull: false
  })
  description!: string;

  @Column({
    type: DataType.DATE,
    allowNull: false
  })
  startDate!: Date;

  @Column({
    type: DataType.DATE,
    allowNull: false
  })
  endDate!: Date;

  @Column({
    type: DataType.DECIMAL(10, 2),
    allowNull: false,
    validate: {
      min: 0,
      max: 10000
    }
  })
  price!: number;

  @Column({
    type: DataType.STRING,
    allowNull: false
  })
  imageFileName!: string;

  @HasMany(() => Follower)
  followers!: Follower[];

  // Virtual fields
  get imageUrl(): string {
    const s3Service = new S3Service();
    return s3Service.getImageUrl(this.imageFileName);
  }

  get isActive(): boolean {
    const now = new Date();
    return now >= this.startDate && now <= this.endDate;
  }

  get isUpcoming(): boolean {
    const now = new Date();
    return now < this.startDate;
  }

  // Hooks
  @BeforeDestroy
  static async deleteImage(instance: Vacation) {
    const s3Service = new S3Service();
    await s3Service.deleteFile(instance.imageFileName);
  }

  // Add image URL to JSON output
  toJSON() {
    const values = { ...this.get() };
    values.imageUrl = this.imageUrl;
    return values;
  }
}
# models/follower.model.ts
import { Table, Column, Model, ForeignKey, BelongsTo, DataType } from 'sequelize-typescript';
import { User } from './user.model';
import { Vacation } from './vacation.model';

@Table({
  tableName: 'followers',
  timestamps: true,
  indexes: [
    {
      unique: true,
      fields: ['userId', 'vacationId']
    }
  ]
})
export class Follower extends Model {
  @ForeignKey(() => User)
  @Column({
    type: DataType.UUID
  })
  userId!: string;

  @ForeignKey(() => Vacation)
  @Column({
    type: DataType.UUID
  })
  vacationId!: string;

  @BelongsTo(() => User)
  user!: User;

  @BelongsTo(() => Vacation)
  vacation!: Vacation;
}
# models/index.ts
// src/models/index.ts
import { Sequelize } from 'sequelize-typescript';
import config from 'config';
import { User } from './user.model';
import { Vacation } from './vacation.model';
import { Follower } from './follower.model';

// Define the database config interface
interface DbConfig {
  host: string;
  port: number;
  database: string;
  dialect: string;
  username: string;
  password: string;
}

// Get database config and cast it to our interface
const dbConfig = config.get<DbConfig>('database');

const sequelize = new Sequelize({
  host: dbConfig.host,
  port: dbConfig.port,
  database: dbConfig.database,
  dialect: dbConfig.dialect as 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mssql',
  username: dbConfig.username,
  password: dbConfig.password,
  models: [User, Vacation, Follower],
  logging: console.log // You can customize based on logging configuration
});

export { sequelize, User, Vacation, Follower };
# validators/vacation.validator.ts
import Joi from 'joi';

const baseVacationSchema = {
  destination: Joi.string().required().messages({
    'string.empty': 'Destination is required',
    'any.required': 'Destination is required'
  }),
  description: Joi.string().required().messages({
    'string.empty': 'Description is required',
    'any.required': 'Description is required'
  }),
  startDate: Joi.date().iso().required().messages({
    'date.base': 'Start date must be a valid date',
    'any.required': 'Start date is required'
  }),
  endDate: Joi.date().iso().min(Joi.ref('startDate')).required().messages({
    'date.base': 'End date must be a valid date',
    'date.min': 'End date must be after start date',
    'any.required': 'End date is required'
  }),
  price: Joi.number().min(0).max(10000).required().messages({
    'number.base': 'Price must be a number',
    'number.min': 'Price must be between 0 and 10,000',
    'number.max': 'Price must be between 0 and 10,000',
    'any.required': 'Price is required'
  })
};

export const createVacationSchema = Joi.object({
  ...baseVacationSchema,
  // Image validation will be handled separately since it's a file
});

export const updateVacationSchema = Joi.object({
  ...baseVacationSchema
  // Image is optional for updates
});
# validators/auth.validator.ts
import Joi from 'joi';

export const registerSchema = Joi.object({
  firstName: Joi.string().required().messages({
    'string.empty': 'First name is required',
    'any.required': 'First name is required'
  }),
  lastName: Joi.string().required().messages({
    'string.empty': 'Last name is required',
    'any.required': 'Last name is required'
  }),
  email: Joi.string().email().required().messages({
    'string.email': 'Please provide a valid email address',
    'string.empty': 'Email is required',
    'any.required': 'Email is required'
  }),
  password: Joi.string().min(4).required().messages({
    'string.min': 'Password must be at least 4 characters long',
    'string.empty': 'Password is required',
    'any.required': 'Password is required'
  })
});

export const loginSchema = Joi.object({
  email: Joi.string().email().required().messages({
    'string.email': 'Please provide a valid email address',
    'string.empty': 'Email is required',
    'any.required': 'Email is required'
  }),
  password: Joi.string().required().messages({
    'string.empty': 'Password is required',
    'any.required': 'Password is required'
  })
});


# controllers/auth.controller.ts
import { Request, Response, NextFunction } from 'express';
import { AuthService } from '../services/auth.service';

export class AuthController {
  private authService: AuthService;

  constructor() {
    this.authService = new AuthService();
  }

  register = async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { firstName, lastName, email, password } = req.body;
      
      const user = await this.authService.register({
        firstName,
        lastName,
        email,
        password
      });

      res.status(201).json(user);
    } catch (error) {
      next(error);
    }
  };

  login = async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { email, password } = req.body;
      
      const { user, token } = await this.authService.login(email, password);

      res.status(200).json({ token, user });
    } catch (error) {
      next(error);
    }
  };
}

# controllers/admin.controller.ts

import { Response, NextFunction } from 'express';
import { Sequelize } from 'sequelize-typescript';
import { createObjectCsvStringifier } from 'csv-writer';
import { Vacation } from '../models/vacation.model';
import { Follower } from '../models/follower.model';
import { AuthRequest } from '../middleware/auth.middleware';
import { S3Service } from '../services/s3.service';
import { AppError } from '../utils/error.utils';

export class AdminController {
  private s3Service: S3Service;

  constructor() {
    this.s3Service = new S3Service();
  }

  createVacation = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      // Check if image was uploaded
      if (!req.file) {
        throw new AppError('Image is required', 400, 'VALIDATION_ERROR');
      }

      // Upload image to S3
      const imageFileName = await this.s3Service.uploadFile(req.file);

      // Validate other fields - already done by validation middleware
      const { destination, description, startDate, endDate, price } = req.body;

      // Create vacation
      const vacation = await Vacation.create({
        destination,
        description,
        startDate: new Date(startDate),
        endDate: new Date(endDate),
        price: parseFloat(price),
        imageFileName
      });

      res.status(201).json(vacation);
    } catch (error) {
      next(error);
    }
  };

  updateVacation = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      const vacationId = req.params.id;
      
      // Validate UUID format
      if (!isUUID(vacationId)) {
        throw new AppError('Invalid vacation ID format', 400);
      }

      // Check if vacation exists
      const vacation = await Vacation.findByPk(vacationId);
      
      if (!vacation) {
        throw new AppError('Vacation not found', 404, 'VACATION_NOT_FOUND');
      }

      // Prepare update data
      const { destination, description, startDate, endDate, price } = req.body;
      const updateData: any = {
        destination,
        description,
        startDate: new Date(startDate),
        endDate: new Date(endDate),
        price: parseFloat(price)
      };

      // Handle image update if provided
      if (req.file) {
        // Upload new image
        const newImageFileName = await this.s3Service.uploadFile(req.file);
        
        // Delete old image
        await this.s3Service.deleteFile(vacation.imageFileName);
        
        // Update filename
        updateData.imageFileName = newImageFileName;
      }

      // Update vacation
      await vacation.update(updateData);

      // Fetch updated vacation
      const updatedVacation = await Vacation.findByPk(vacationId);

      res.status(200).json(updatedVacation);
    } catch (error) {
      next(error);
    }
  };

  deleteVacation = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      const vacationId = req.params.id;
      
      // Validate UUID format
      if (!isUUID(vacationId)) {
        throw new AppError('Invalid vacation ID format', 400);
      }

      // Check if vacation exists
      const vacation = await Vacation.findByPk(vacationId);
      
      if (!vacation) {
        throw new AppError('Vacation not found', 404, 'VACATION_NOT_FOUND');
      }

      // Delete vacation (image will be deleted by hook)
      await vacation.destroy();

      res.status(200).json({ message: 'Vacation deleted successfully' });
    } catch (error) {
      next(error);
    }
  };

  getVacationReports = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      // Get follower counts grouped by vacation
      const reports = await Vacation.findAll({
        attributes: [
          'id',
          'destination',
          [Sequelize.fn('COUNT', Sequelize.col('followers.id')), 'followerCount']
        ],
        include: [{
          model: Follower,
          attributes: []
        }],
        group: ['Vacation.id', 'Vacation.destination'],
        order: [[Sequelize.literal('followerCount'), 'DESC']]
      });

      // Format the response
      const formattedReports = reports.map(report => ({
        destination: report.destination,
        followerCount: parseInt((report as any).dataValues.followerCount, 10)
      }));

      res.status(200).json(formattedReports);
    } catch (error) {
      next(error);
    }
  };

  downloadCsvReport = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      // Get the reports data
      const reports = await Vacation.findAll({
        attributes: [
          'destination',
          [Sequelize.fn('COUNT', Sequelize.col('followers.id')), 'followers']
        ],
        include: [{
          model: Follower,
          attributes: []
        }],
        group: ['Vacation.destination'],
        order: [[Sequelize.literal('followers'), 'DESC']]
      });

      // Format the data for CSV
      const records = reports.map(report => ({
        Destination: report.destination,
        Followers: (report as any).dataValues.followers
      }));

      // Create CSV
      const csvStringifier = createObjectCsvStringifier({
        header: [
          { id: 'Destination', title: 'Destination' },
          { id: 'Followers', title: 'Followers' }
        ]
      });

      const csvContent = csvStringifier.getHeaderString() + csvStringifier.stringifyRecords(records);

      // Set response headers
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename=vacation-report.csv');

      // Send the CSV
      res.status(200).send(csvContent);
    } catch (error) {
      next(error);
    }
  };
}
# controllers/vacation.controller.ts

import { Response, NextFunction } from 'express';
import { Op } from 'sequelize';
import { Vacation } from '../models/vacation.model';
import { Follower } from '../models/follower.model';
import { AuthRequest } from '../middleware/auth.middleware';
import { AppError } from '../utils/error.utils';

export class VacationController {
  listVacations = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      const { page = '1', limit = '10', followed, upcoming, active } = req.query;
      
      const pageNum = parseInt(page as string, 10);
      const limitNum = parseInt(limit as string, 10);
      const offset = (pageNum - 1) * limitNum;
      
      // Build the where condition
      const whereCondition: any = {};
      
      // Filter by upcoming vacations
      if (upcoming === 'true') {
        whereCondition.startDate = {
          [Op.gt]: new Date()
        };
      }
      
      // Filter by active vacations
      if (active === 'true') {
        const now = new Date();
        whereCondition[Op.and] = [
          { startDate: { [Op.lte]: now } },
          { endDate: { [Op.gte]: now } }
        ];
      }

      // Get user ID
      const userId = req.user!.id;
      
      // Get all vacations with follow count and user's follow status
      const { count, rows } = await Vacation.findAndCountAll({
        where: whereCondition,
        limit: limitNum,
        offset,
        order: [['startDate', 'ASC']],
        distinct: true,
        include: [
          {
            model: Follower,
            attributes: ['userId'],
            required: followed === 'true'
          }
        ]
      });

      // Get followed vacation IDs for the current user
      const followedVacations = await Follower.findAll({
        where: { userId },
        attributes: ['vacationId']
      });
      
      const followedIds = new Set(followedVacations.map(f => f.vacationId));

      // Format the response
      const vacationsWithFollowStatus = rows.map(vacation => {
        const vacationJson = vacation.toJSON();
        
        // Add follow count
        vacationJson.followCount = vacation.followers ? vacation.followers.length : 0;
        
        // Add follow status for current user
        vacationJson.isFollowing = followedIds.has(vacation.id);
        
        return vacationJson;
      });

      res.status(200).json({
        data: vacationsWithFollowStatus,
        pagination: {
          total: count,
          pages: Math.ceil(count / limitNum),
          currentPage: pageNum,
          hasNext: pageNum * limitNum < count,
          hasPrev: pageNum > 1
        }
      });
    } catch (error) {
      next(error);
    }
  };

  followVacation = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      const vacationId = req.params.id;
      
      // Validate UUID format
      if (!isUUID(vacationId)) {
        throw new AppError('Invalid vacation ID format', 400);
      }
      
      const userId = req.user!.id;

      // Check if vacation exists
      const vacation = await Vacation.findByPk(vacationId);
      
      if (!vacation) {
        throw new AppError('Vacation not found', 404, 'VACATION_NOT_FOUND');
      }

      // Check if already following
      const existingFollow = await Follower.findOne({
        where: { userId, vacationId }
      });
      
      if (existingFollow) {
        throw new AppError('Already following this vacation', 400, 'ALREADY_FOLLOWING');
      }

      // Create follower record
      await Follower.create({ userId, vacationId });

      res.status(200).json({ message: 'Vacation followed successfully' });
    } catch (error) {
      next(error);
    }
  };

  unfollowVacation = async (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      const vacationId = req.params.id;
      
      // Validate UUID format
      if (!isUUID(vacationId)) {
        throw new AppError('Invalid vacation ID format', 400);
      }
      
      const userId = req.user!.id;

      // Check if vacation exists
      const vacation = await Vacation.findByPk(vacationId);
      
      if (!vacation) {
        throw new AppError('Vacation not found', 404, 'VACATION_NOT_FOUND');
      }

      // Check if following
      const follower = await Follower.findOne({
        where: { userId, vacationId }
      });
      
      if (!follower) {
        throw new AppError('Not following this vacation', 404, 'NOT_FOLLOWING');
      }

      // Delete follower record
      await follower.destroy();

      res.status(200).json({ message: 'Vacation unfollowed successfully' });
    } catch (error) {
      next(error);
    }
  };
}

# server.ts
import config from 'config';
import app from './app';
import { sequelize } from './models';

interface ServerConfig {
  port: number;
  host: string;
}

const serverConfig = config.get<ServerConfig>('server');
const PORT = serverConfig.port;
const HOST = serverConfig.host;

// Start the server
const startServer = async () => {
  try {
    // Sync database
    await sequelize.sync();
    console.log('Database connected successfully');

    // Start server
    app.listen(PORT, () => {
      console.log(`Server running at http://${HOST}:${PORT}`);
      console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
};

startServer();
# routes/admin.routes.ts

import { Router } from 'express';
import multer from 'multer';
import { AdminController } from '../controllers/admin.controller';
import { authenticate } from '../middleware/auth.middleware';
import { requireAdmin } from '../middleware/admin.middleware';
import { validate } from '../middleware/validation.middleware';
import { createVacationSchema, updateVacationSchema } from '../validators/vacation.validator';

const router = Router();
const adminController = new AdminController();

// Setup multer for file uploads
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed') as any);
    }
  }
});

// Apply authentication and admin middleware to all routes
router.use(authenticate, requireAdmin);

// Create vacation
router.post(
  '/vacations',
  upload.single('image'),
  validate(createVacationSchema),
  adminController.createVacation
);

// Update vacation
router.put(
  '/vacations/:id',
  upload.single('image'),
  validate(updateVacationSchema),
  adminController.updateVacation
);

// Delete vacation
router.delete('/vacations/:id', adminController.deleteVacation);

// Get vacation reports
router.get('/reports', adminController.getVacationReports);

// Download CSV report
router.get('/reports/csv', adminController.downloadCsvReport);

export default router;

# routes/index.ts

// src/routes/index.ts
import { Router } from 'express';
import authRoutes from './auth.routes';
import vacationRoutes from './vacation.routes';
import adminRoutes from './admin.routes';

const router = Router();

// Auth routes
router.use('/auth', authRoutes);

// Vacation routes
router.use('/vacations', vacationRoutes);

// Admin routes
router.use('/admin', adminRoutes);

export default router;
# routes/vacation.routes.ts

import { Router } from 'express';
import { VacationController } from '../controllers/vacation.controller';
import { authenticate } from '../middleware/auth.middleware';

const router = Router();
const vacationController = new VacationController();

// Apply authentication middleware to all routes
router.use(authenticate);

// List vacations
router.get('/', vacationController.listVacations);

// Follow vacation
router.post('/:id/follow', vacationController.followVacation);

// Unfollow vacation
router.delete('/:id/follow', vacationController.unfollowVacation);

export default router;

# routes/auth.routes.ts
import { Router } from 'express';
import { AuthController } from '../controllers/auth.controller';
import { validate } from '../middleware/validation.middleware';
import { registerSchema, loginSchema } from '../validators/auth.validator';

const router = Router();
const authController = new AuthController();

// Register route
router.post('/register', validate(registerSchema), authController.register);

// Login route
router.post('/login', validate(loginSchema), authController.login);

export default router;

# services/auth.service.ts
import { User, UserRole } from '../models/user.model';
import { AppError } from '../utils/error.utils';
import { generateToken } from '../utils/jwt.utils';

export class AuthService {
  async register(userData: {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
  }) {
    // Check if email already exists
    const existingUser = await User.findOne({ where: { email: userData.email } });
    
    if (existingUser) {
      throw new AppError('Email already exists', 409, 'EMAIL_EXISTS');
    }

    // Create new user
    const user = await User.create({
      firstName: userData.firstName,
      lastName: userData.lastName,
      email: userData.email,
      password: userData.password,
      role: UserRole.USER
    });

    return user;
  }

  async login(email: string, password: string) {
    // Find user by email
    const user = await User.findOne({ where: { email } });
    
    if (!user) {
      throw new AppError('Invalid credentials', 401, 'INVALID_CREDENTIALS');
    }

    // Compare passwords
    const isPasswordValid = await user.comparePassword(password);
    
    if (!isPasswordValid) {
      throw new AppError('Invalid credentials', 401, 'INVALID_CREDENTIALS');
    }

    // Generate JWT token
    const token = generateToken(user);

    return { user, token };
  }
}
# services/s3.service.ts
// src/services/s3.service.ts
import AWS from 'aws-sdk';
import config from 'config';
import { v4 as uuidv4 } from 'uuid';

interface S3Config {
  region: string;
  accessKeyId: string;
  secretAccessKey: string;
  bucket: string;
  endpoint?: string | null;
  forcePathStyle?: boolean;
}

export class S3Service {
  private s3: AWS.S3;
  private bucket: string;
  private endpoint?: string | null;

  constructor() {
    // Cast config.get to our interface
    const awsConfig = config.get<S3Config>('aws.s3');
    
    // Configure S3 with optional endpoint for LocalStack
    const s3Options: AWS.S3.ClientConfiguration = {
      region: awsConfig.region,
      accessKeyId: awsConfig.accessKeyId,
      secretAccessKey: awsConfig.secretAccessKey
    };
    
    // If endpoint is defined, use it (for LocalStack)
    if (awsConfig.endpoint) {
      s3Options.endpoint = awsConfig.endpoint;
      s3Options.s3ForcePathStyle = awsConfig.forcePathStyle || false;
    }

    this.s3 = new AWS.S3(s3Options);
    this.bucket = awsConfig.bucket;
    this.endpoint = awsConfig.endpoint;
    
    console.log(`S3 Service configured with bucket: ${this.bucket}`);
    if (this.endpoint) {
      console.log(`Using custom endpoint: ${this.endpoint}`);
    }
  }

  async uploadFile(file: Express.Multer.File): Promise<string> {
    // Generate a UUID v4 filename (already implemented)
    const fileExtension = file.originalname.split('.').pop();
    const fileName = `${uuidv4()}.${fileExtension}`;

    const params = {
      Bucket: this.bucket,
      Key: fileName,
      Body: file.buffer,
      ContentType: file.mimetype,
      ACL: 'public-read' // Make the file publicly accessible
    };

    await this.s3.upload(params).promise();
    return fileName;
  }

  // Updated to use the endpoint if available
  getImageUrl(fileName: string): string {
    if (this.endpoint) {
      return `${this.endpoint}/${this.bucket}/${fileName}`;
    }
    return `https://${this.bucket}.s3.amazonaws.com/${fileName}`;
  }

  async deleteFile(fileName: string): Promise<void> {
    const params = {
      Bucket: this.bucket,
      Key: fileName
    };

    await this.s3.deleteObject(params).promise();
  }
}
